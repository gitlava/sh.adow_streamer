#!/bin/sh
#
 
### LICENSE ####################################################################
# Copyright (c) 2012, Eugene 'lava' Lavnikevich
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.
################################################################################

### DESCRIPTION ################################################################
# Script to add logging functionality into other scripts with possibilities to
# setup different levels and different output directions.
#
# This shell-script is developed as a "library" for other scripts, but not as a
# standalone application.
################################################################################

# First of all, prevent stand-alone launch of the script
STREAMER_BNAME='sh.adow_streamer'
if ps -p $$ wwo cmd= | grep -q "${STREAMER_BNAME}"
then
    cat <<EOUSAGE
Script to add logging functionality into other scripts with possibilities to 
setup different levels and different output directions.

This shell-script is developed as a "library" for other scripts, but not as a 
standalone application.

Usage example:

. /usr/local/lib/sh.adow/sh.adow_streamer
wrp_level 1 -
wrp_level 3 - debug.log
wrp_level 2 - errors.log debug.log

From this moment redirection works until the end of your script. It works 
for every running application which can give output to stdout or/and stderr 
or/and level3:
  - stdout of every command will continue to be produced on screen;
  - level 3 is supposed to be debug level and will go to screen and to the
    file debug.log;
  - stderr of every command will go to the console of your script and to
    files error.log, debug.log.

EOUSAGE

    exit 1
fi

### DESCRIPTION ################################################################
# Shadow Tracker is a part of the sh.adow_streamer functionality. There will be
# one Tracker for every output level wrapped with the Shadow Streamer until your
# script is finished.
#
# Shadow Tracker will read produced output from the FIFO and pass it to
# the external locations
#
# Shadow Tracker is not supposed to be runned stand-alone. It have been designed
# only as a part of Shadow Streamer, though you can adapt it for your needs.
################################################################################
tracker() {
    [ -d "${1}" ] || { echo "Wrong usage of Shadow Tracker." >&2; exit 1; }

    SHADOW_LEVEL="${1}"
    TARGETS=$(cat "${SHADOW_LEVEL}"/targets)
    PREFIX=$(cat "${SHADOW_LEVEL}"/prefix)

    # Send string to each target
    # String passed as argument
    # Targets passed with stdin
    multiply() {
        while read target
        do
            echo "$@" >>"${target}"
        done
    }

    exec >/dev/null 2>&1

    # Main program cycle to track output and retranslate it to the desired
    # locations
    while read line <"${SHADOW_LEVEL}"/fifo
    do
        string=$(eval echo "\"${PREFIX}\"")"${line}"
        echo "${TARGETS}" | multiply "${string}"
    done
}

# Workaround for the issue when shell is unable to extend `exec $level>$path'.
loglevel1() { exec 1>"${1}"; }
loglevel2() { exec 2>"${1}"; }
loglevel3() { exec 3>"${1}"; }
loglevel4() { exec 4>"${1}"; }
loglevel5() { exec 5>"${1}"; }
loglevel6() { exec 6>"${1}"; }
loglevel7() { exec 7>"${1}"; }
loglevel8() { exec 8>"${1}"; }
loglevel9() { exec 9>"${1}"; }

# Set up logging for specified channel
# Args: LEVEL OUTPUT...
#       LEVEL         - Number, desired level to configure.
#       OUTPUT...     - Path(s) where output should be going;
#                       Put '-' to copy out to the tty (where stdin points);
#                       '--' could be placed in the beginning of OUTPUT...
#                       in order to close level and not prevent producing
#                       of any output.
wrp_level() {
    local level="${1}"
    shift # Level stored, all remaining params supposed to be target outputs.

    # Level should be a single digit and couldn't be stdio.
    if ! { echo "${level}" | grep -q '^[1-9]$'; }
    then
        echo "[ERROR] Redirection of level '${level}' averted: incorrect level" >&2
        return 0;
    fi

    # Check if the descriptor should be closed at all.
    # Note: by closing I mean redirection to null because some application
    # would fail to work if standard descroptors are simply closed.
    if [ "$1" = "--" ]
    then
        eval loglevel${level} /dev/null
        return
    fi

    # Create config directory for level
    mkdir -p "/tmp/${STREAMER_BNAME}.$$/${level}"

    local prefix="${SH_PREFIX}"
    # Set prefix if specified
    if [ "$1" = "-p" ]
    then
        prefix=$2
        shift; shift
    fi

    echo "${prefix}" >"/tmp/${STREAMER_BNAME}.$$/${level}/prefix"

    # Generate targets to pass for redirection.
    : >"/tmp/${STREAMER_BNAME}.$$/${level}/targets"
    for target in "${@}"
    do
        case "${target}" in
            -)
                case "${level}" in
                    1|2)
                        # tty 2>/dev/null >>"/tmp/${STREAMER_BNAME}.$$/${level}/targets"
                        readlink -f /proc/$$/fd/${level} >>"/tmp/${STREAMER_BNAME}.$$/${level}/targets"
                        ;;
                    *)
                esac
                ;;
            *)
                readlink -f "${target}" >>"/tmp/${STREAMER_BNAME}.$$/${level}/targets"
                ;;
        esac
    done

    # Create FIFO and initialize redirection.
    mkfifo "/tmp/${STREAMER_BNAME}.$$/${level}/fifo"
    tracker "/tmp/${STREAMER_BNAME}.$$/${level}" &
    eval "loglevel${level}" "/tmp/${STREAMER_BNAME}.$$/${level}/fifo"
}


# Initialization and setting traps
# Working directory structure example
#
# /tmp/sh.adow_streamer.6382/
# ├── 1
# │   ├── fifo
# │   ├── prefix
# │   └── targets_list
# ├── 2
# │   ├── fifo
# │   ├── prefix
# │   └── targets_list
# └── 3
#     ├── fifo
#     ├── prefix
#     └── targets_list
#
# Here 6382             is PID of the script which uses sh.adow_streamer
#      fifo             used for redirection
#      prefix           contains OUTPUT prefix for each line in the output
#      targets_list     contains output directions
#

mkdir -p "/tmp/${STREAMER_BNAME}.$$"
trap "rm -rf /tmp/${STREAMER_BNAME}.$$" EXIT

