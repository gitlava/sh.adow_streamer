#!/bin/sh
#
 
### LICENSE ####################################################################
# Copyright (c) 2012, Eugene 'lava' Lavnikevich
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.
################################################################################

### DESCRIPTION ################################################################
# Script to add logging functionality into other scripts with possibilities to
# setup different levels and different output directions.
#
# This shell-script is developed as a "library" for other scripts, but not as a
# standalone application.
################################################################################

STREAMER_BNAME='sh.adow_streamer'
if ps wweo pid,cmd | grep -q "^\s*$$.*${STREAMER_BNAME}"
then
    echo Usage example:
    echo . /usr/local/lib/sh.adow/sh.adow_streamer
    echo log_level 1 -
    echo log_level 3 - debug.log
    echo log_level 2 - errors.log debug.log
    echo   From this moment redirection working until the end of your script
    echo   It works for every running application which can give output to
    echo   stdout or/and stderr or/and level3:
    echo   - stdout of every command will continue to be produced on screen
    echo   - level 3 is supposed to be debug level and will go to screen and
    echo     to the file debug.log
    echo   - stderr of every command will go to the stderr stream of your
    echo     script and to error.log, and to debug.log
    echo
fi

# Shadow Tracker is a part of the sh.adow_streamer functionality
# There will be one Tracker for every output level launched from the time of
# sh.adow_streamer usage and until your script is finished
#
# Shadow Tracker will read produced output from the FIFO and pass it to
# the external locations
if [ "${1}" = "track" ]
then
    shift # Shadow tracker mode activated and this option is no longer required

    # Declare cleanup function and set trap
    # to remove all temporary files at exit
    tracker_cleanup() { rm -f "${FIFO}"; exit 0; }
    trap tracker_cleanup INT HUP TERM

    # FIFO is a FIFO-channel to get output of the target application
    FIFO="${1}"

    shift # FIFO is stored, other parameters are supposed to be targets

    # Main program cycle to track output and retranslate it to the desired
    # locations
    while read line
    do
        for i in $(seq 1 $#)
        do
            TARGET=$(eval ${${i}})
            echo "${line}" >>"${TARGET}"
        done
    done <"${FIFO}"

    exit 0
fi


# Shell can't extend `exec $level>$path' so we require separate functions in
# order to emulate this work
loglevel1() { exec 1>"${1}"; }
loglevel2() { exec 2>"${1}"; }
loglevel3() { exec 3>"${1}"; }
loglevel4() { exec 4>"${1}"; }
loglevel5() { exec 5>"${1}"; }
loglevel6() { exec 6>"${1}"; }
loglevel7() { exec 7>"${1}"; }
loglevel8() { exec 8>"${1}"; }
loglevel9() { exec 9>"${1}"; }

# Set up logging for specified channel
# Args: LEVEL OUTPUT...
#       LEVEL         - number, desired level to configure
#       OUTPUT...     - path where output should be going
#                       put '-' to copy out to the tty (where stdin points)
wrap_level() {
    local level="${1}"
    shift # Level stored, all remaining params supposed to be target outputs

    # Level should be a single digit and couldn't be stdio
    if ! { echo "${level}" | grep -q '^[1-9]$'; }
    then
        echo "[ERROR] Redirection of level '${level}' averted: incorrect level" >&2
        return 0;
    fi

    # Check if descriptor should be closed at all
    if [ "$1" = "--" ]
    then
        eval loglevel${level} /dev/null
    fi

    # Generate targets to pass for redirection
    TARGETS=
    for target in "${@}"
    do
        case "${target}" in
            -)
                TARGETS="${TARGETS} $(tty)"
                ;;
            *)
                TARGETS="${TARGETS} ${target}"
                ;;
        esac
    done

    eval loglevel${level} "${@}"
}


# Initialization and setting traps
# Working directory structure example
#
# sh.adow_streamer.6382/
# ├── 1
# │   ├── fifo
# │   ├── prefix
# │   └── targets_list
# ├── 2
# │   ├── fifo
# │   ├── prefix
# │   └── targets_list
# └── 3
#     ├── fifo
#     ├── prefix
#     └── targets_list
#
# Here 6382             is PID of the script which uses sh.adow_streamer
#      fifo             used for redirection
#      prefix           contains OUTPUT prefix for each line in the output
#      targets_list     contains output directions
#

mkdir -p /tmp/sh.adow_streamer.$$

